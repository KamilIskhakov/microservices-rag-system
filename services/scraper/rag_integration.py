"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É —Å–∫—Ä–∞–ø–ø–µ—Ä–æ–º –∏ RAG —Å–∏—Å—Ç–µ–º–æ–π
"""
import logging
import httpx
from typing import List, Dict, Any
from datetime import datetime

from src.domain.entities.scraped_data import ScrapedData
from src.domain.entities.vector_document import VectorDocument

logger = logging.getLogger(__name__)

from config import scraper_settings

class RAGIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self, vectorstore_url: str = None):
        self.vectorstore_url = vectorstore_url or scraper_settings.VECTORSTORE_URL
    
    async def add_scraped_data_to_rag(self, scraped_data: List[ScrapedData]) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∞–ø–ø–µ—Ä–∞ –≤ RAG —Å–∏—Å—Ç–µ–º—É"""
        try:
            logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(scraped_data)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ RAG —Å–∏—Å—Ç–µ–º—É...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è batch –æ—Ç–ø—Ä–∞–≤–∫–∏
            documents = []
            for material in scraped_data:
                document = {
                    "text": material.content.lower(),
                    "metadata": {
                        "source": "minjust",
                        "number": material.number.lower(),
                        "date": material.date.isoformat() if material.date else "",
                        "content": material.content.lower()
                    }
                }
                documents.append(document)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.vectorstore_url}/add-documents-batch",
                    json=documents,
                    timeout=300.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–∏
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {result.get('added_count', 0)} –∏–∑ {len(scraped_data)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ RAG —Å–∏—Å—Ç–µ–º—É")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {response.status_code}")
                    return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π: {e}")
            return False
    
    async def search_in_rag(self, query: str, top_k: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤ RAG —Å–∏—Å—Ç–µ–º–µ"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.vectorstore_url}/search",
                    json={
                        "query": query,
                        "top_k": top_k,
                        "threshold": 0.3
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    data = response.json()
                    return data.get("results", [])
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ RAG: {response.status_code}")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ RAG —Å–∏—Å—Ç–µ–º–µ: {e}")
            return []
    
    async def get_rag_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.vectorstore_url}/statistics")
                
                if response.status_code == 200:
                    return response.json()
                else:
                    return {"error": f"Status code: {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG: {e}")
            return {"error": str(e)} 