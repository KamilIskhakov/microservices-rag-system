"""
API Gateway Service - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
"""
import logging
import time
from datetime import datetime
from typing import Dict, Any, List, Optional
import os
import sys

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–æ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç—ã –¥–æ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
from domain.services.gateway_service import GatewayService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title="API Gateway Service", version="2.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
gateway_service: Optional[GatewayService] = None


class ServiceHealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
    service: str
    status: str
    response_time: Optional[float] = None
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None


class GatewayResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API Gateway"""
    success: bool
    request_id: Optional[str] = None
    target_service: Optional[str] = None
    status_code: Optional[int] = None
    body: Optional[Dict[str, Any]] = None
    processing_time: float
    timestamp: str
    error: Optional[str] = None


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global gateway_service
    
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Gateway Service...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        gateway_service = GatewayService()
        
        logger.info("‚úÖ API Gateway Service –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API Gateway Service: {e}")
        raise


@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global gateway_service
    
    try:
        if gateway_service:
            await gateway_service.close()
        logger.info("‚úÖ API Gateway Service –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è API Gateway Service: {e}")


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API Gateway"""
    try:
        if gateway_service is None:
            return {"status": "unhealthy", "error": "Service not initialized"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        services_health = await gateway_service.check_all_services_health()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        all_healthy = all(
            health.get("status") == "healthy" 
            for health in services_health.values()
        )
        
        return {
            "status": "healthy" if all_healthy else "degraded",
            "service": "api-gateway",
            "timestamp": datetime.now().isoformat(),
            "services": services_health
        }
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {"status": "unhealthy", "error": str(e)}


@app.get("/services")
async def get_services_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö"""
    try:
        if gateway_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        services = gateway_service.get_all_services_info()
        
        result = {}
        for name, service in services.items():
            result[name] = {
                "name": service.name,
                "url": service.url,
                "is_available": service.is_available,
                "last_check": service.last_check.isoformat() if service.last_check else None,
                "response_time": service.response_time
            }
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/services/{service_name}/health")
async def check_service_health(service_name: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        if gateway_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        health_data = await gateway_service.check_service_health(service_name)
        
        return ServiceHealthResponse(**health_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.api_route("/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def route_request(request: Request, path: str):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–∏—Å—É"""
    try:
        if gateway_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        method = request.method
        headers = dict(request.headers)
        body = None
        
        if method in ["POST", "PUT"]:
            try:
                body = await request.json()
            except:
                body = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ session_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        user_id = headers.get("X-User-ID")
        session_id = headers.get("X-Session-ID")
        
        logger.info(f"–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å {method} /{path}")
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        result = await gateway_service.route_request(
            method=method,
            path=f"/{path}",
            headers=headers,
            body=body,
            user_id=user_id,
            session_id=session_id
        )
        
        processing_time = time.time() - start_time
        
        if result["success"]:
            return JSONResponse(
                status_code=result["status_code"],
                content=result["body"]
            )
        else:
            return JSONResponse(
                status_code=500,
                content={
                    "error": result["error"],
                    "request_id": result["request_id"],
                    "processing_time": processing_time
                }
            )
            
    except Exception as e:
        processing_time = time.time() - start_time
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        return JSONResponse(
            status_code=500,
            content={
                "error": str(e),
                "processing_time": processing_time
            }
        )


@app.get("/statistics")
async def get_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API Gateway"""
    try:
        if gateway_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
        services = gateway_service.get_all_services_info()
        
        available_services = sum(1 for s in services.values() if s.is_available)
        total_services = len(services)
        
        return {
            "total_services": total_services,
            "available_services": available_services,
            "unavailable_services": total_services - available_services,
            "uptime_percentage": (available_services / total_services * 100) if total_services > 0 else 0
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "service": "API Gateway",
        "version": "2.0.0",
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "endpoints": {
            "health": "/health",
            "services": "/services",
            "service_health": "/services/{service_name}/health",
            "statistics": "/statistics"
        }
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
