"""
API Gateway Service - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional

import redis
import httpx
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

from src.domain.entities.request import Request
from src.infrastructure.persistence.in_memory_repositories import InMemoryRequestRepository
from src.application.commands.request_commands import (
    CreateRequestCommand,
    CreateRequestCommandHandler
)
from src.application.commands.command_bus import CommandBus
from src.shared.utils.logger import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logger

app = FastAPI(title="RAG API Gateway", version="2.0.0")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(host='redis', port=6379, decode_responses=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
request_repository: Optional[InMemoryRequestRepository] = None
command_bus: Optional[CommandBus] = None

class CheckRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—Å—Ç–∞"""
    query: str
    user_id: Optional[str] = None
    session_id: Optional[str] = None

class CheckResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    success: bool
    result: str
    processing_time: float
    timestamp: str
    confidence: float = 0.0
    extremist_reason: str = ""
    court_date: str = ""
    court_name: str = ""
    material_name: str = ""
    error: Optional[str] = None

class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    status: str
    service: str
    timestamp: str
    dependencies: Dict[str, str]

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global request_repository, command_bus
    
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Gateway...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤
        request_repository = InMemoryRequestRepository()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∏–Ω—É –∫–æ–º–∞–Ω–¥
        command_bus = CommandBus()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        command_bus.register_handler(
            CreateRequestCommand,
            CreateRequestCommandHandler(request_repository)
        )
        
        logger.info("‚úÖ API Gateway –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API Gateway: {e}")
        raise

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        redis_healthy = "healthy"
        try:
            redis_client.ping()
        except:
            redis_healthy = "unhealthy"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        services_healthy = "healthy"
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            pass
        except:
            services_healthy = "unhealthy"
        
        return HealthResponse(
            status="healthy",
            service="api-gateway",
            timestamp=datetime.now().isoformat(),
            dependencies={
                "redis": redis_healthy,
                "services": services_healthy
            }
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return HealthResponse(
            status="unhealthy",
            service="api-gateway",
            timestamp=datetime.now().isoformat(),
            dependencies={
                "redis": "unknown",
                "services": "unknown"
            }
        )

@app.post("/check", response_model=CheckResponse)
async def check_text(request: CheckRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º"""
    start_time = time.time()
    
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        query_lower = request.query.lower()
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {query_lower[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        command = CreateRequestCommand(
            query=query_lower,
            user_id=request.user_id,
            session_id=request.session_id
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        result = await command_bus.handle(command)
        
        processing_time = time.time() - start_time
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Request Processor –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        async with httpx.AsyncClient() as client:
            try:
                # –ó–∞–ø—Ä–æ—Å –∫ Request Processor
                request_data = {
                    "query": query_lower,
                    "user_id": request.user_id
                }
                logger.info(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ request-processor: data={request_data}")
                processor_response = await client.post(
                    "http://request-processor:8004/check-text",
                    json=request_data,
                    timeout=15.0
                )
                
                if processor_response.status_code == 200:
                    processor_data = processor_response.json()
                    logger.info(f"üìä –û—Ç–≤–µ—Ç –æ—Ç request-processor: {processor_data}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    is_extremist = processor_data.get("is_extremist", False)
                    confidence = processor_data.get("confidence", 0.0)
                    matches = processor_data.get("matches", [])
                    logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: is_extremist={is_extremist}, confidence={confidence}")
                    
                    if is_extremist:
                        return CheckResponse(
                            success=True,
                            result="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–∞",
                            processing_time=processing_time,
                            timestamp=datetime.now().isoformat(),
                            confidence=confidence,
                            extremist_reason=processor_data.get("reason", "–ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"),
                            court_date=processor_data.get("court_date", ""),
                            court_name="–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —é—Å—Ç–∏—Ü–∏–∏ –†–§",
                            material_name=processor_data.get("material_name", "")
                        )
                    else:
                        return CheckResponse(
                            success=True,
                            result="–ü—Ä–∏–∑–Ω–∞–∫–∏ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã",
                            processing_time=processing_time,
                            timestamp=datetime.now().isoformat(),
                            confidence=confidence,
                            extremist_reason="–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–∞",
                            court_date="",
                            court_name="",
                            material_name=""
                        )
                else:
                    # Request Processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    return CheckResponse(
                        success=False,
                        result="",
                        processing_time=processing_time,
                        timestamp=datetime.now().isoformat(),
                        error="Request Processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    )
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Request Processor: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ fallback
                return CheckResponse(
                    success=False,
                    result="",
                    processing_time=processing_time,
                    timestamp=datetime.now().isoformat(),
                    error=f"–û—à–∏–±–∫–∞ Request Processor: {str(e)}"
                )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        processing_time = time.time() - start_time
        
        return CheckResponse(
            success=False,
            result="",
            processing_time=processing_time,
            timestamp=datetime.now().isoformat(),
            error=str(e)
        )

@app.get("/statistics")
async def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        if request_repository is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        stats = request_repository.get_statistics()
        return {
            "success": True,
            "statistics": stats,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 