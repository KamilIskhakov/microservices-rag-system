"""
Vector Store Service API - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
"""
import logging
import time
from datetime import datetime
from typing import Dict, Any, List, Optional
import os
import sys

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–æ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç—ã –¥–æ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
from domain.services.vector_service import VectorService
from infrastructure.persistence.optimized_faiss_repository import OptimizedFAISSRepository

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title="Vector Store Service", version="2.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
vector_service: Optional[VectorService] = None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MODEL_NAME = os.getenv("VECTOR_STORE_MODEL", "sentence-transformers/all-MiniLM-L6-v2")
RELEVANCE_THRESHOLD = float(os.getenv("RELEVANCE_THRESHOLD", "0.3"))
TOP_K_RESULTS = int(os.getenv("TOP_K_RESULTS", "5"))


class DocumentRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    content: str
    metadata: Dict[str, Any] = {}


class SearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    query: str
    top_k: int = TOP_K_RESULTS
    threshold: float = RELEVANCE_THRESHOLD


class SearchResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–∏—Å–∫"""
    success: bool
    results: List[Dict[str, Any]]
    processing_time: float
    timestamp: str
    query: str
    total_results: int
    error: Optional[str] = None


class DocumentResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    success: bool
    document_id: str
    processing_time: float
    timestamp: str
    error: Optional[str] = None


class StatisticsResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    total_documents: int
    indexed_documents: int
    index_size: int
    embedding_dimension: int
    model_name: str


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global vector_service
    
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vector Store Service...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        vector_repository = OptimizedFAISSRepository(model_name=MODEL_NAME)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        vector_service = VectorService(vector_repository, MODEL_NAME)
        
        logger.info("‚úÖ Vector Store Service –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vector Store Service: {e}")
        raise


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        if vector_service is None:
            return {"status": "unhealthy", "error": "Service not initialized"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
        stats = await vector_service.get_statistics()
        
        return {
            "status": "healthy",
            "service": "vectorstore",
            "timestamp": datetime.now().isoformat(),
            "total_documents": stats.get("total_documents", 0),
            "indexed_documents": stats.get("index_size", 0)
        }
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {"status": "unhealthy", "error": str(e)}


@app.post("/add-document", response_model=DocumentResponse)
async def add_document(request: DocumentRequest):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        start_time = time.time()
        
        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {request.content[:50]}...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document_id = vector_service.add_document(
            content=request.content,
            metadata=request.metadata
        )
        
        processing_time = time.time() - start_time
        
        return DocumentResponse(
            success=True,
            document_id=document_id,
            processing_time=processing_time,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/add-documents")
async def add_documents(documents: List[DocumentRequest]):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        start_time = time.time()
        
        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        docs_data = []
        for doc in documents:
            docs_data.append({
                "content": doc.content,
                "metadata": doc.metadata
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        document_ids = vector_service.add_documents(docs_data)
        
        processing_time = time.time() - start_time
        
        return {
            "success": True,
            "document_ids": document_ids,
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat(),
            "total_added": len(document_ids)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/search", response_model=SearchResponse)
async def search_documents(request: SearchRequest):
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        start_time = time.time()
        
        logger.info(f"–ü–æ–∏—Å–∫: {request.query[:50]}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await vector_service.search_similar(
            query=request.query,
            top_k=request.top_k,
            threshold=request.threshold
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
        results_data = []
        logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
        
        for i, result in enumerate(results):
            try:
                result_dict = {
                    "document_id": result.document_id,
                    "content": result.content,
                    "relevance_score": result.relevance_score,
                    "distance": result.distance,
                    "metadata": result.metadata
                }
                results_data.append(result_dict)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i}: {e}")
                logger.error(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
                logger.error(f"–ê—Ç—Ä–∏–±—É—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {dir(result)}")
                raise
        
        processing_time = time.time() - start_time
        
        return SearchResponse(
            success=True,
            results=results_data,
            processing_time=processing_time,
            timestamp=datetime.now().isoformat(),
            query=request.query,
            total_results=len(results_data)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/document/{document_id}")
async def get_document(document_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        document = vector_service.get_document(document_id)
        if not document:
            raise HTTPException(status_code=404, detail="Document not found")
        
        return {
            "id": document.id,
            "content": document.content,
            "metadata": document.metadata,
            "created_at": document.created_at.isoformat(),
            "updated_at": document.updated_at.isoformat(),
            "is_indexed": document.is_indexed()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.put("/document/{document_id}")
async def update_document(document_id: str, request: DocumentRequest):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        start_time = time.time()
        
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {document_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        success = vector_service.update_document(
            document_id=document_id,
            content=request.content,
            metadata=request.metadata
        )
        
        if not success:
            raise HTTPException(status_code=404, detail="Document not found")
        
        processing_time = time.time() - start_time
        
        return DocumentResponse(
            success=True,
            document_id=document_id,
            processing_time=processing_time,
            timestamp=datetime.now().isoformat()
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/document/{document_id}")
async def delete_document(document_id: str):
    """–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        logger.info(f"–£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {document_id}")
        
        # –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        success = vector_service.delete_document(document_id)
        
        if not success:
            raise HTTPException(status_code=404, detail="Document not found")
        
        return {
            "success": True,
            "document_id": document_id,
            "message": "Document deleted successfully"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/documents")
async def get_all_documents():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        documents = vector_service.get_all_documents()
        
        result = []
        for doc in documents:
            result.append({
                "id": doc.id,
                "content": doc.content[:100] + "..." if len(doc.content) > 100 else doc.content,
                "metadata": doc.metadata,
                "created_at": doc.created_at.isoformat(),
                "updated_at": doc.updated_at.isoformat(),
                "is_indexed": doc.is_indexed()
            })
        
        return {
            "documents": result,
            "total": len(result)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/statistics", response_model=StatisticsResponse)
async def get_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        stats = vector_service.get_statistics()
        
        return StatisticsResponse(**stats)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/model-info")
async def get_model_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        return vector_service.get_model_info()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/clear-index")
async def clear_index():
    """–û—á–∏—Å—Ç–∏—Ç—å –∏–Ω–¥–µ–∫—Å"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        logger.info("–û—á–∏—â–∞–µ–º –∏–Ω–¥–µ–∫—Å...")
        
        success = vector_service.clear_index()
        
        return {
            "success": success,
            "message": "Index cleared successfully" if success else "Failed to clear index"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/rebuild-index")
async def rebuild_index():
    """–ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–µ–∫—Å"""
    try:
        if vector_service is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        logger.info("–ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å...")
        
        success = vector_service.rebuild_index()
        
        return {
            "success": success,
            "message": "Index rebuilt successfully" if success else "Failed to rebuild index"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8002)
