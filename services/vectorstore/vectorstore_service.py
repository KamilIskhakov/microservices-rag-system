"""
Vector Store Service - —Ä–∞–±–æ—Ç–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional, List

import redis
import numpy as np
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

from src.domain.entities.vector_document import VectorDocument
from src.infrastructure.persistence.faiss_repository import FaissVectorRepository
from src.application.commands.vector_commands import (
    AddDocumentCommand,
    AddDocumentCommandHandler,
    SearchDocumentsCommand,
    SearchDocumentsCommandHandler,
    CommandBus
)
from src.shared.utils.logger import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logger

app = FastAPI(title="RAG Vector Store Service", version="2.0.0")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(host='redis', port=6379, decode_responses=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
vector_repository: Optional[FaissVectorRepository] = None
command_bus: Optional[CommandBus] = None

class DocumentRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    text: str
    metadata: Dict[str, Any] = {}
    embedding: Optional[List[float]] = None

class SearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    query: str
    top_k: int = 5
    threshold: float = 0.3

class SearchResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"""
    text: str
    relevance_score: float
    metadata: Dict[str, Any] = {}

class SearchResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–∏—Å–∫"""
    success: bool
    results: List[SearchResult] = []
    total_found: int = 0
    processing_time: float = 0.0
    timestamp: str
    error: Optional[str] = None

class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    status: str
    service: str
    timestamp: str
    dependencies: Dict[str, str]
    vector_store_info: Dict[str, Any]

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global vector_repository, command_bus
    
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vector Store Service —Å FAISS...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FAISS —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        vector_repository = FaissVectorRepository()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∏–Ω—É –∫–æ–º–∞–Ω–¥
        command_bus = CommandBus()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        command_bus.register_handler(
            AddDocumentCommand,
            AddDocumentCommandHandler(vector_repository)
        )
        
        command_bus.register_handler(
            SearchDocumentsCommand,
            SearchDocumentsCommandHandler(vector_repository)
        )
        
        logger.info("‚úÖ Vector Store Service —Å FAISS –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vector Store Service: {e}")
        raise

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        redis_healthy = "healthy"
        try:
            redis_client.ping()
        except:
            redis_healthy = "unhealthy"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        vector_info = vector_repository.get_info() if vector_repository else {}
        
        dependencies = {
            "redis": redis_healthy,
            "faiss": "healthy" if vector_repository else "unhealthy"
        }
        
        return HealthResponse(
            status="healthy" if redis_healthy == "healthy" else "unhealthy",
            service="vectorstore",
            timestamp=datetime.now().isoformat(),
            dependencies=dependencies,
            vector_store_info=vector_info
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return HealthResponse(
            status="unhealthy",
            service="vectorstore",
            timestamp=datetime.now().isoformat(),
            dependencies={"error": str(e)},
            vector_store_info={}
        )

@app.post("/add-document")
async def add_document(request: DocumentRequest):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    start_time = time.time()
    
    try:
        logger.info(f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {request.text[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        command = AddDocumentCommand(
            text=request.text,
            metadata=request.metadata,
            embedding=request.embedding
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —à–∏–Ω—É –∫–æ–º–∞–Ω–¥
        result = await command_bus.handle(command)
        
        processing_time = time.time() - start_time
        
        return {
            "success": True,
            "document_id": result.document_id,
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        processing_time = time.time() - start_time
        
        return {
            "success": False,
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }

@app.post("/add-documents-batch")
async def add_documents_batch(requests: List[DocumentRequest]):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    start_time = time.time()
    
    try:
        logger.info(f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(requests)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        added_count = 0
        errors = []
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        documents = []
        for request in requests:
            document = VectorDocument(
                id=None,
                text=request.text,
                metadata=request.metadata or {},
                created_at=datetime.now()
            )
            documents.append(document)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã batch'–æ–º
        try:
            doc_ids = vector_repository.add_documents_batch(documents)
            added_count = len(doc_ids)
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ batch'–æ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
            errors.append(f"Batch error: {str(e)}")
        
        processing_time = time.time() - start_time
        
        return {
            "success": True,
            "added_count": added_count,
            "total_count": len(requests),
            "errors": errors,
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        processing_time = time.time() - start_time
        
        return {
            "success": False,
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }

@app.post("/remove-excluded-documents")
async def remove_excluded_documents():
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å '–∏—Å–∫–ª—é—á–µ–Ω' –∏–∑ –±–∞–∑—ã"""
    start_time = time.time()
    try:
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å '–∏—Å–∫–ª—é—á–µ–Ω'...")
        
        def filter_excluded(doc):
            return "–∏—Å–∫–ª—é—á–µ–Ω" in doc.text.lower() or "–º–∞—Ç–µ—Ä–∏–∞–ª –∏—Å–∫–ª—é—á–µ–Ω" in doc.text.lower()
        
        removed_count = vector_repository.remove_documents_by_filter(filter_excluded)
        
        processing_time = time.time() - start_time
        return {
            "success": True,
            "removed_count": removed_count,
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        processing_time = time.time() - start_time
        return {
            "success": False,
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }

@app.post("/search", response_model=SearchResponse)
async def search_documents(request: SearchRequest):
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    start_time = time.time()
    
    try:
        if vector_repository is None:
            raise HTTPException(status_code=503, detail="Vector repository not initialized")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ FAISS
        results = vector_repository.search_documents(request.query, request.top_k, request.threshold)
        
        processing_time = time.time() - start_time
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        search_results = []
        for result in results:
            # –í FAISS –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ score = –ª—É—á—à–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            # –ù–æ –º—ã —Ö–æ—Ç–∏–º –º–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            relevance_score = 1.0 - result.relevance_score
            
            search_results.append(SearchResult(
                text=result.document.text,
                relevance_score=relevance_score,
                metadata=result.document.metadata or {}  # FAISS –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –ø–æ—ç—Ç–æ–º—É –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            ))
        
        return SearchResponse(
            success=True,
            results=search_results,
            total_found=len(search_results),
            processing_time=processing_time,
            timestamp=datetime.now().isoformat(),
            error=None
        )
        
    except Exception as e:
        processing_time = time.time() - start_time
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        
        return SearchResponse(
            success=False,
            results=[],
            total_found=0,
            processing_time=processing_time,
            timestamp=datetime.now().isoformat(),
            error=str(e)
        )

@app.get("/documents/count")
async def get_documents_count():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    try:
        count = vector_repository.get_documents_count()
        
        return {
            "success": True,
            "count": count,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error getting documents count: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/documents/{document_id}")
async def get_document(document_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID"""
    try:
        document = vector_repository.get_document(document_id)
        
        if document is None:
            raise HTTPException(status_code=404, detail="Document not found")
        
        return {
            "success": True,
            "document": {
                "id": document.id,
                "text": document.text,
                "metadata": document.metadata,
                "created_at": document.created_at.isoformat()
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting document {document_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/documents/{document_id}")
async def delete_document(document_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        success = vector_repository.delete_document(document_id)
        
        if not success:
            raise HTTPException(status_code=404, detail="Document not found")
        
        return {
            "success": True,
            "message": f"Document {document_id} deleted successfully",
            "timestamp": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting document {document_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/reindex")
async def reindex_documents():
    """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        start_time = time.time()
        result = vector_repository.reindex()
        processing_time = time.time() - start_time
        
        return {
            "success": True,
            "message": "Reindexing completed successfully",
            "documents_processed": len(vector_repository.documents),
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error reindexing documents: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/statistics")
async def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        stats = vector_repository.get_statistics()
        
        return {
            "success": True,
            "statistics": stats,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error getting statistics: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/clear-all")
async def clear_all_documents():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        vector_repository.clear_all()
        
        return {
            "success": True,
            "message": "All documents cleared successfully",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error clearing all documents: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8002) 