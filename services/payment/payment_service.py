"""
Payment Service - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
"""
import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

import redis
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

from src.domain.entities.payment import Payment, Subscription
from src.infrastructure.persistence.in_memory_repositories import InMemoryPaymentRepository as PaymentRepository
from src.application.commands.payment_commands import (
    CreatePaymentCommand,
    CreatePaymentCommandHandler,
    ProcessPaymentCommand,
    ProcessPaymentCommandHandler,
    CommandBus
)
from src.shared.utils.logger import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logger

app = FastAPI(title="RAG Payment Service", version="2.0.0")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(host='redis', port=6379, decode_responses=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
payment_repository: Optional[PaymentRepository] = None
command_bus: Optional[CommandBus] = None

class PaymentRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id: str
    amount: float
    currency: str = "RUB"
    description: str = ""
    payment_method: str = "yookassa"

class PaymentResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    success: bool
    payment_id: Optional[str] = None
    payment_url: Optional[str] = None
    amount: float = 0.0
    currency: str = "RUB"
    status: str = "pending"
    timestamp: str
    error: Optional[str] = None

class SubscriptionRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id: str
    plan_type: str  # "basic", "premium", "enterprise"
    duration_days: int = 30

class SubscriptionResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    success: bool
    subscription_id: Optional[str] = None
    plan_type: str = ""
    start_date: str = ""
    end_date: str = ""
    status: str = "active"
    timestamp: str
    error: Optional[str] = None

class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    status: str
    service: str
    timestamp: str
    dependencies: Dict[str, str]

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global payment_repository, command_bus
    
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Payment Service...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–ª–∞—Ç–µ–∂–µ–π
        payment_repository = PaymentRepository()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∏–Ω—É –∫–æ–º–∞–Ω–¥
        command_bus = CommandBus()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        command_bus.register_handler(
            CreatePaymentCommand,
            CreatePaymentCommandHandler(payment_repository)
        )
        
        command_bus.register_handler(
            ProcessPaymentCommand,
            ProcessPaymentCommandHandler(payment_repository)
        )
        
        logger.info("‚úÖ Payment Service –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Payment Service: {e}")
        raise

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        redis_healthy = "healthy"
        try:
            redis_client.ping()
        except:
            redis_healthy = "unhealthy"
        
        dependencies = {
            "redis": redis_healthy,
            "yookassa": "unknown"  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è —á–µ—Ä–µ–∑ API
        }
        
        return HealthResponse(
            status="healthy" if redis_healthy == "healthy" else "unhealthy",
            service="payment",
            timestamp=datetime.now().isoformat(),
            dependencies=dependencies
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return HealthResponse(
            status="unhealthy",
            service="payment",
            timestamp=datetime.now().isoformat(),
            dependencies={"error": str(e)}
        )

@app.post("/create-payment", response_model=PaymentResponse)
async def create_payment(request: PaymentRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    start_time = time.time()
    
    try:
        logger.info(f"üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        command = CreatePaymentCommand(
            user_id=request.user_id,
            amount=request.amount,
            currency=request.currency,
            description=request.description,
            payment_method=request.payment_method
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —à–∏–Ω—É –∫–æ–º–∞–Ω–¥
        result = await command_bus.handle(command)
        
        return PaymentResponse(
            success=True,
            payment_id=result.payment_id,
            payment_url=result.payment_url,
            amount=request.amount,
            currency=request.currency,
            status="pending",
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        
        return PaymentResponse(
            success=False,
            amount=request.amount,
            currency=request.currency,
            status="failed",
            timestamp=datetime.now().isoformat(),
            error=str(e)
        )

@app.post("/process-payment/{payment_id}")
async def process_payment(payment_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (webhook –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)"""
    try:
        logger.info(f"üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        command = ProcessPaymentCommand(payment_id=payment_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —à–∏–Ω—É –∫–æ–º–∞–Ω–¥
        result = await command_bus.handle(command)
        
        return {
            "success": True,
            "payment_id": payment_id,
            "status": result.status,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/create-subscription", response_model=SubscriptionResponse)
async def create_subscription(request: SubscriptionRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = Subscription(
            user_id=request.user_id,
            plan_type=request.plan_type,
            start_date=datetime.now(),
            end_date=datetime.now() + timedelta(days=request.duration_days),
            status="active"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        subscription_id = payment_repository.save_subscription(subscription)
        
        return SubscriptionResponse(
            success=True,
            subscription_id=subscription_id,
            plan_type=request.plan_type,
            start_date=subscription.start_date.isoformat(),
            end_date=subscription.end_date.isoformat(),
            status="active",
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        
        return SubscriptionResponse(
            success=False,
            plan_type=request.plan_type,
            status="failed",
            timestamp=datetime.now().isoformat(),
            error=str(e)
        )

@app.get("/subscription/{user_id}")
async def get_user_subscription(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        subscription = payment_repository.get_user_subscription(user_id)
        
        if subscription is None:
            return {
                "success": False,
                "message": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        return {
            "success": True,
            "subscription": {
                "user_id": subscription.user_id,
                "plan_type": subscription.plan_type,
                "start_date": subscription.start_date.isoformat(),
                "end_date": subscription.end_date.isoformat(),
                "status": subscription.status
            }
        }
        
    except Exception as e:
        logger.error(f"Error getting subscription for user {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/payments/{user_id}")
async def get_user_payments(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        payments = payment_repository.get_user_payments(user_id)
        
        return {
            "success": True,
            "payments": [
                {
                    "payment_id": payment.payment_id,
                    "amount": payment.amount,
                    "currency": payment.currency,
                    "status": payment.status,
                    "created_at": payment.created_at.isoformat()
                }
                for payment in payments
            ]
        }
        
    except Exception as e:
        logger.error(f"Error getting payments for user {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8004) 