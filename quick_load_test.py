#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Vector Store
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import asyncio
import aiohttp
import time
import statistics
from typing import List, Dict, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
VECTORSTORE_URL = "http://localhost:8002"
REQUEST_PROCESSOR_URL = "http://localhost:8004"
TOTAL_REQUESTS = 100
CONCURRENT_REQUESTS = 20  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
QUERIES = [
    "–º—É–∑—ã–∫–∞",
    "–∫–Ω–∏–≥–∞", 
    "–≤–∏–¥–µ–æ",
    "—Å—Ç–∞—Ç—å—è",
    "–¥–æ–∫—É–º–µ–Ω—Ç"
]

class QuickLoadTester:
    def __init__(self):
        self.results: List[Dict[str, Any]] = []
        self.semaphore = asyncio.Semaphore(CONCURRENT_REQUESTS)
    
    async def make_request(self, session: aiohttp.ClientSession, query: str, request_id: int) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ Vector Store"""
        async with self.semaphore:
            start_time = time.time()
            
            try:
                payload = {
                    "query": query,
                    "top_k": 5,
                    "threshold": 0.5
                }
                
                async with session.post(
                    f"{VECTORSTORE_URL}/search",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    end_time = time.time()
                    processing_time = end_time - start_time
                    
                    if response.status == 200:
                        data = await response.json()
                        return {
                            "request_id": request_id,
                            "query": query,
                            "status": "success",
                            "processing_time": processing_time,
                            "response_time": data.get("processing_time", 0),
                            "total_results": data.get("total_results", 0),
                            "http_status": response.status
                        }
                    else:
                        return {
                            "request_id": request_id,
                            "query": query,
                            "status": "error",
                            "processing_time": processing_time,
                            "error": f"HTTP {response.status}",
                            "http_status": response.status
                        }
                        
            except Exception as e:
                end_time = time.time()
                return {
                    "request_id": request_id,
                    "query": query,
                    "status": "error",
                    "processing_time": end_time - start_time,
                    "error": str(e),
                    "http_status": 0
                }
    
    async def test_vectorstore_direct(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Vector Store"""
        logger.info(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Vector Store")
        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {TOTAL_REQUESTS}")
        logger.info(f"‚ö° –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {CONCURRENT_REQUESTS}")
        
        start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            tasks = []
            
            for i in range(TOTAL_REQUESTS):
                query = QUERIES[i % len(QUERIES)]
                task = self.make_request(session, query, i)
                tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            self.results = [r for r in results if isinstance(r, dict)]
        
        total_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results(total_time)
    
    def analyze_results(self, total_time: float):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        successful_requests = [r for r in self.results if r["status"] == "success"]
        failed_requests = [r for r in self.results if r["status"] == "error"]
        
        if not successful_requests:
            logger.error("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        processing_times = [r["processing_time"] for r in successful_requests]
        response_times = [r.get("response_time", 0) for r in successful_requests]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_requests = len(self.results)
        success_rate = len(successful_requests) / total_requests * 100
        requests_per_second = total_requests / total_time
        
        logger.info("=" * 50)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê")
        logger.info("=" * 50)
        logger.info(f"üïê –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful_requests)}")
        logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(failed_requests)}")
        logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        logger.info(f"‚ö° –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {requests_per_second:.1f}")
        
        logger.info("\nüìà –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {statistics.mean(processing_times):.3f} —Å–µ–∫")
        logger.info(f"   –ú–µ–¥–∏–∞–Ω–∞: {statistics.median(processing_times):.3f} —Å–µ–∫")
        logger.info(f"   –ú–∏–Ω–∏–º—É–º: {min(processing_times):.3f} —Å–µ–∫")
        logger.info(f"   –ú–∞–∫—Å–∏–º—É–º: {max(processing_times):.3f} —Å–µ–∫")
        
        if any(response_times):
            response_times_filtered = [t for t in response_times if t > 0]
            if response_times_filtered:
                logger.info(f"\nüìà –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–∏—Å–∞:")
                logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ: {statistics.mean(response_times_filtered):.3f} —Å–µ–∫")
                logger.info(f"   –ú–µ–¥–∏–∞–Ω–∞: {statistics.median(response_times_filtered):.3f} —Å–µ–∫")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        total_results = sum(r.get("total_results", 0) for r in successful_requests)
        avg_results = total_results / len(successful_requests) if successful_requests else 0
        logger.info(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
        logger.info(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_results}")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_results:.1f}")
        
        logger.info("=" * 50)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = QuickLoadTester()
    await tester.test_vectorstore_direct()

if __name__ == "__main__":
    asyncio.run(main())
