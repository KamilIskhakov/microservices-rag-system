class ExtremistCheckerPopup {
  constructor() {
    this.apiUrl = 'http://localhost:8000/check';
    this.isChecking = false;
    
    this.queryInput = document.getElementById('query');
    this.checkButton = document.getElementById('checkBtn');
    this.resultDiv = document.getElementById('result');
    
    this.init();
  }

  init() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    this.loadSavedQuery();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.checkButton.addEventListener('click', () => this.checkContent());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
    this.queryInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && e.ctrlKey) {
        this.checkContent();
      }
    });

    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    this.queryInput.focus();
  }

  loadSavedQuery() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {
      chrome.scripting.executeScript({
        target: {tabId: tabs[0].id},
        function: () => {
          // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          const searchInputs = [
            'input[name="q"]',  // Google, Bing, DuckDuckGo
            'input[name="text"]', // Yandex
            'input[type="search"]'
          ];
          
          for (const selector of searchInputs) {
            const input = document.querySelector(selector);
            if (input && input.value.trim()) {
              return input.value.trim();
            }
          }
          
          return '';
        }
      }, (results) => {
        if (results && results[0] && results[0].result) {
          this.queryInput.value = results[0].result;
        }
      });
    });

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    chrome.storage.session.get('query', (data) => {
      if (data.query && !this.queryInput.value) {
        this.queryInput.value = data.query;
      }
    });
  }

  async checkContent() {
    const query = this.queryInput.value.trim();
    
    if (!query) {
      this.showResult('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'warning');
      return;
    }

    if (this.isChecking) {
      return;
    }

    this.isChecking = true;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    chrome.storage.session.set({ query: query });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.checkButton.disabled = true;
    this.checkButton.innerHTML = '<div class="loading-spinner"></div>–ü—Ä–æ–≤–µ—Ä—è–µ–º...';
    
    this.showResult('–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Ä–µ–µ—Å—Ç—Ä–µ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ú–∏–Ω—é—Å—Ç–∞ –†–§...', 'loading');

    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query: query })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      this.displayResult(data);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n';
      
      if (error.message.includes('Failed to fetch')) {
        errorMessage += '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n';
        errorMessage += '‚Ä¢ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000\n';
        errorMessage += '‚Ä¢ –ù–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ CORS\n';
        errorMessage += '‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç';
      } else {
        errorMessage += `–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${error.message}`;
      }
      
      this.showResult(errorMessage, 'danger');
    } finally {
      this.isChecking = false;
      this.checkButton.disabled = false;
      this.checkButton.innerHTML = 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å';
    }
  }

  displayResult(data) {
    const result = data.result;
    let resultClass = 'safe';
    let icon = '‚úÖ';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
    if (result.toLowerCase().includes('–∑–∞–ø—Ä–µ—â–µ–Ω') || 
        result.toLowerCase().includes('—ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç') ||
        result.toLowerCase().includes('–≤–Ω–µ—Å–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä') ||
        result.toLowerCase().includes('–ø—Ä–∏–∑–Ω–∞–Ω —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–º')) {
      resultClass = 'danger';
      icon = 'üö´';
    } else if (result.toLowerCase().includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') || 
               result.toLowerCase().includes('—Ä–∞–∑—Ä–µ—à–µ–Ω') ||
               result.toLowerCase().includes('–Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–º')) {
      resultClass = 'safe';
      icon = '‚úÖ';
    } else {
      resultClass = 'warning';
      icon = '‚ö†Ô∏è';
    }

    let message = `${icon} ${result}`;
    
    if (data.processing_time) {
      message += `\n\n‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data.processing_time.toFixed(2)} —Å–µ–∫.`;
    }

    if (data.confidence) {
      message += `\nüéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(data.confidence * 100).toFixed(1)}%`;
    }

    this.showResult(message, resultClass);
  }

  showResult(message, type) {
    this.resultDiv.textContent = message;
    this.resultDiv.className = type;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º popup –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  new ExtremistCheckerPopup();
});