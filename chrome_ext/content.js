class ExtremistContentChecker {
  constructor() {
    this.apiUrl = 'http://localhost:8000/check';
    this.isChecking = false;
    this.lastQuery = '';
    this.resultContainer = null;
    this.checkButton = null;
    
    this.init();
  }

  init() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ExtremistContentChecker');
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.setupInterface());
    } else {
      this.setupInterface();
    }
  }

  setupInterface() {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
    this.detectSearchEngine();
    this.createCheckButton();
    this.createPreSearchButton();
    this.createPremiumButton();
    this.createResultContainer();
    this.attachEventListeners();
  }

  detectSearchEngine() {
    const hostname = window.location.hostname;
    console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –¥–ª—è:', hostname);
    
    if (hostname.includes('google.com')) {
      this.searchEngine = 'google';
      this.searchInputSelector = 'input[name="q"]';
      this.searchFormSelector = 'form[role="search"]';
      this.insertionPoint = '#search';
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω Google');
    } else if (hostname.includes('yandex.ru')) {
      this.searchEngine = 'yandex';
      this.searchInputSelector = 'input[name="text"]';
      this.searchFormSelector = '.search2__form';
      this.insertionPoint = '.content__left';
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω Yandex');
    } else if (hostname.includes('bing.com')) {
      this.searchEngine = 'bing';
      this.searchInputSelector = 'input[name="q"]';
      this.searchFormSelector = '#sb_form';
      this.insertionPoint = '#b_results';
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω Bing');
    } else if (hostname.includes('duckduckgo.com')) {
      this.searchEngine = 'duckduckgo';
      this.searchInputSelector = 'input[name="q"]';
      this.searchFormSelector = '#search_form';
      this.insertionPoint = '#links';
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω DuckDuckGo');
    } else {
      console.log('–ü–æ–∏—Å–∫–æ–≤–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã');
      this.searchEngine = 'unknown';
      this.searchInputSelector = 'input[type="search"], input[name="q"], input[name="text"]';
      this.insertionPoint = 'body';
    }
  }

  getSearchQuery() {
    const input = document.querySelector(this.searchInputSelector);
    return input ? input.value.trim() : '';
  }

  createCheckButton() {
    this.checkButton = document.createElement('button');
    this.checkButton.className = 'extremist-check-button';
    this.checkButton.innerHTML = `
      <svg class="shield-icon" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M12,7C13.4,7 14.8,8.6 14.8,10V11.5C15.4,11.5 16,12.1 16,12.7V16.2C16,16.8 15.4,17.3 14.8,17.3H9.2C8.6,17.3 8,16.8 8,16.2V12.8C8,12.2 8.6,11.7 9.2,11.7V10C9.2,8.6 10.6,7 12,7M12,8.2C11.2,8.2 10.5,8.7 10.5,9.5V11.5H13.5V9.5C13.5,8.7 12.8,8.2 12,8.2Z"/>
      </svg>
      –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º
    `;
    
    this.checkButton.addEventListener('click', () => this.checkContent());
  }

  createPreSearchButton() {
    this.preSearchButton = document.createElement('button');
    this.preSearchButton.className = 'extremist-pre-search-button';
    this.preSearchButton.innerHTML = `
      <svg class="shield-icon" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M12,7C13.4,7 14.8,8.6 14.8,10V11.5C15.4,11.5 16,12.1 16,12.7V16.2C16,16.8 15.4,17.3 14.8,17.3H9.2C8.6,17.3 8,16.8 8,16.2V12.8C8,12.2 8.6,11.7 9.2,11.7V10C9.2,8.6 10.6,7 12,7M12,8.2C11.2,8.2 10.5,8.7 10.5,9.5V11.5H13.5V9.5C13.5,8.7 12.8,8.2 12,8.2Z"/>
      </svg>
      –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –î–û –ø–æ–∏—Å–∫–∞
    `;
    
    this.preSearchButton.addEventListener('click', () => this.checkPreSearch());
  }

  createPremiumButton() {
    this.premiumButton = document.createElement('button');
    this.premiumButton.className = 'extremist-premium-button';
    this.premiumButton.innerHTML = `
      üíé –ü—Ä–µ–º–∏—É–º
    `;
    
    this.premiumButton.addEventListener('click', () => this.showPremiumModal());
  }

  createResultContainer() {
    this.resultContainer = document.createElement('div');
    this.resultContainer.className = 'extremist-check-result';
    this.resultContainer.style.display = 'none';
  }

  insertElements() {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞:', this.searchEngine);

    if (document.querySelector('.extremist-check-button')) {
      console.log('–ö–Ω–æ–ø–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É');
      return;
    }
    
    this.insertPreSearchButton();
    this.insertPremiumButton();
    this.insertMainButton();
  }

  insertPreSearchButton() {
    const searchInput = document.querySelector(this.searchInputSelector);
    if (searchInput) {
      const searchForm = searchInput.closest('form');
      if (searchForm) {
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'extremist-pre-search-container';
        buttonContainer.appendChild(this.preSearchButton);
        buttonContainer.appendChild(this.premiumButton);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        searchForm.appendChild(buttonContainer);
        console.log('–ö–Ω–æ–ø–∫–∏ –î–û –ø–æ–∏—Å–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã');
      }
    }
  }

  insertPremiumButton() {
  }

  insertMainButton() {
    const insertionElement = document.querySelector(this.insertionPoint);
    console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤—Å—Ç–∞–≤–∫–∏:', insertionElement);
    
    if (insertionElement) {
      const container = document.createElement('div');
      container.className = `extremist-check-container-${this.searchEngine}`;
      
      container.appendChild(this.checkButton);
      container.appendChild(this.resultContainer);
      if (this.searchEngine === 'google') {
        const searchDiv = document.querySelector('#search');
        console.log('Google search div:', searchDiv);
        if (searchDiv) {
          searchDiv.insertBefore(container, searchDiv.firstChild);
          console.log('–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ Google');
        }
      } else if (this.searchEngine === 'yandex') {
        const contentLeft = document.querySelector('.content__left');
        console.log('Yandex content left:', contentLeft);
        if (contentLeft) {
          contentLeft.insertBefore(container, contentLeft.firstChild);
          console.log('–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ Yandex');
        }
      } else if (this.searchEngine === 'bing') {
        const bingResults = document.querySelector('#b_results');
        console.log('Bing results:', bingResults);
        if (bingResults) {
          bingResults.insertBefore(container, bingResults.firstChild);
          console.log('–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ Bing');
        }
      } else if (this.searchEngine === 'duckduckgo') {
        const ddgResults = document.querySelector('#links');
        console.log('DuckDuckGo results:', ddgResults);
        if (ddgResults) {
          ddgResults.insertBefore(container, ddgResults.firstChild);
          console.log('–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ DuckDuckGo');
        }
      } else {
        insertionElement.insertBefore(container, insertionElement.firstChild);
        console.log('–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—â–∏–π —ç–ª–µ–º–µ–Ω—Ç');
      }
    } else {
      console.log('–≠–ª–µ–º–µ–Ω—Ç –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:', this.insertionPoint);
    }
  }

  attachEventListeners() {
    const searchInput = document.querySelector(this.searchInputSelector);
    if (searchInput) {
      searchInput.addEventListener('input', () => {
        this.hideResult();
      });
    }

    const observer = new MutationObserver(() => {
      if (!document.querySelector('.extremist-check-button')) {
        this.insertElements();
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    setTimeout(() => this.insertElements(), 500);
    setTimeout(() => this.insertElements(), 1500);
    setTimeout(() => this.insertElements(), 3000);
  }

  async checkContent() {
    const query = this.getSearchQuery();
    
    if (!query) {
      this.showResult('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'warning');
      return;
    }

    if (this.isChecking) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã 
    // const canMakeRequest = await this.limitsService.canMakeRequest();
    // if (!canMakeRequest) {
    //   this.showUpgradePrompt();
    //   return;
    // }

    this.isChecking = true;
    this.lastQuery = query;
    
    this.checkButton.disabled = true;
    this.checkButton.innerHTML = `
      <div class="loading-spinner"></div>
      –ü—Ä–æ–≤–µ—Ä—è–µ–º...
    `;

    this.showResult('–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Ä–µ–µ—Å—Ç—Ä–µ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...', 'loading');

    try {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API:', this.apiUrl);
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', { query: query });
      
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query: query })
      });
      
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      this.displayResult(data);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n';
      
      if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
        errorMessage += '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n';
        errorMessage += '‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n';
        errorMessage += '‚Ä¢ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n';
        errorMessage += '‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\n\n';
        errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
      } else if (error.message.includes('429')) {
        errorMessage += '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
      } else if (error.message.includes('500')) {
        errorMessage += '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else {
        errorMessage += `–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${error.message}`;
      }
      
      this.showResult(errorMessage, 'danger');
    } finally {
      this.isChecking = false;
      this.checkButton.disabled = false;
      this.checkButton.innerHTML = `
        <svg class="shield-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M12,7C13.4,7 14.8,8.6 14.8,10V11.5C15.4,11.5 16,12.1 16,12.7V16.2C16,16.8 15.4,17.3 14.8,17.3H9.2C8.6,17.3 8,16.8 8,16.2V12.8C8,12.2 8.6,11.7 9.2,11.7V10C9.2,8.6 10.6,7 12,7M12,8.2C11.2,8.2 10.5,8.7 10.5,9.5V11.5H13.5V9.5C13.5,8.7 12.8,8.2 12,8.2Z"/>
        </svg>
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º
      `;
    }
  }

  displayResult(data) {
    const result = data.result;
    let resultClass = 'safe';
    if (result.toLowerCase().includes('–∑–∞–ø—Ä–µ—â–µ–Ω') || 
        result.toLowerCase().includes('—ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç') ||
        result.toLowerCase().includes('–≤–Ω–µ—Å–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä')) {
      resultClass = 'danger';
    } else if (result.toLowerCase().includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') || 
               result.toLowerCase().includes('—Ä–∞–∑—Ä–µ—à–µ–Ω')) {
      resultClass = 'safe';
    } else {
      resultClass = 'warning';
    }

    const processingTime = data.processing_time ? 
      `<div style="font-size: 12px; color: #666; margin-top: 8px;">
        –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data.processing_time.toFixed(2)}—Å
      </div>` : '';

    this.showResult(result + processingTime, resultClass);
  }

  showResult(message, type) {
    this.resultContainer.innerHTML = message;
    this.resultContainer.className = `extremist-check-result ${type}`;
    this.resultContainer.style.display = 'block';
  }

  hideResult() {
    this.resultContainer.style.display = 'none';
  }

  showUpgradePrompt() {
    this.showResult(
      '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (20).\n\n' +
      'üíé –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ü—Ä–µ–º–∏—É–º —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏!',
      'warning'
    );
  }

  checkPreSearch() {
    const searchInput = document.querySelector(this.searchInputSelector);
    if (searchInput) {
      const query = searchInput.value.trim();
      if (query) {
        this.checkContent();
      } else {
        this.showResult('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'warning');
      }
    } else {
      this.showResult('–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'warning');
    }
  }

  showPremiumModal() {
    const modal = document.createElement('div');
    modal.className = 'extremist-premium-modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h2>üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</h2>
          <button class="close-btn" onclick="this.parentElement.parentElement.parentElement.remove()">√ó</button>
        </div>
        <div class="modal-body">
          <div class="pricing-card">
            <h3>299 ‚ÇΩ/–º–µ—Å—è—Ü</h3>
            <ul>
              <li>‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫</li>
              <li>‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</li>
              <li>‚úÖ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã</li>
            </ul>
            <button class="upgrade-btn-large" onclick="this.parentElement.parentElement.parentElement.remove(); window.open('https://extremist-checker.com/premium', '_blank')">
              üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º
            </button>
          </div>
        </div>
      </div>
    `;

    const style = document.createElement('style');
    style.textContent = `
      .extremist-premium-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
      }
      .modal-content {
        background: white;
        border-radius: 12px;
        padding: 20px;
        max-width: 400px;
        width: 90%;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
      }
      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
      }
      .close-btn {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #666;
      }
      .pricing-card {
        text-align: center;
      }
      .pricing-card h3 {
        color: #333;
        margin-bottom: 15px;
      }
      .pricing-card ul {
        text-align: left;
        margin: 15px 0;
        padding-left: 20px;
      }
      .upgrade-btn-large {
        background: linear-gradient(135deg, #ffd700, #ffed4e);
        color: #333;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        width: 100%;
      }
      .upgrade-btn-large:hover {
        background: linear-gradient(135deg, #ffed4e, #ffd700);
        transform: translateY(-1px);
      }
    `;
    document.head.appendChild(style);
    document.body.appendChild(modal);
  }
}

new ExtremistContentChecker();

new ExtremistContentChecker();