"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
"""
import logging
from typing import Dict, Any, Optional
from .production_config import ProductionConfig


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.config = ProductionConfig()
        self.logger = logging.getLogger(__name__)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if not self.config.validate():
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        
        self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_model_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏"""
        return self.config.model_config
    
    def get_device_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        return self.config.device_config
    
    def get_services_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return self.config.services_config
    
    def get_scraper_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∫—Ä–∞–ø–µ—Ä–∞"""
        return self.config.scraper_config
    
    def get_performance_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.config.performance_config
    
    def get_security_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return self.config.security_config
    
    def get_monitoring_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return self.config.monitoring_config
    
    def get_service_url(self, service_name: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å URL —Å–µ—Ä–≤–∏—Å–∞"""
        services = self.get_services_config()
        if service_name not in services:
            raise ValueError(f"–°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return services[service_name]
    
    def get_model_path(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏"""
        return self.get_model_config()["path"]
    
    def get_device_type(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        return self.get_device_config()["type"]
    
    def get_cpu_threads(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU –ø–æ—Ç–æ–∫–æ–≤"""
        return self.get_device_config()["cpu_threads"]
    
    def get_gpu_memory_fraction(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª—é –ø–∞–º—è—Ç–∏ GPU"""
        return self.get_device_config()["gpu_memory_fraction"]
    
    def get_max_generation_time(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return self.get_performance_config()["max_generation_time"]
    
    def get_max_workers(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        return self.get_performance_config()["max_workers"]
    
    def get_max_processes(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        return self.get_performance_config()["max_processes"]
    
    def get_minjust_url(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å URL —Å–∞–π—Ç–∞ –ú–∏–Ω—é—Å—Ç–∞"""
        return self.get_scraper_config()["minjust_url"]
    
    def get_scraper_delay(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É —Å–∫—Ä–∞–ø–µ—Ä–∞"""
        return self.get_scraper_config()["delay"]
    
    def get_scraper_timeout(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —Å–∫—Ä–∞–ø–µ—Ä–∞"""
        return self.get_scraper_config()["timeout"]
    
    def get_max_new_tokens(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        return self.get_model_config()["max_new_tokens"]
    
    def get_generation_temperature(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return self.get_model_config()["temperature"]
    
    def is_gpu_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU"""
        try:
            import torch
            return torch.cuda.is_available()
        except ImportError:
            return False
    
    def should_use_gpu(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU"""
        device_type = self.get_device_type()
        if device_type == "gpu":
            return self.is_gpu_available()
        elif device_type == "auto":
            return self.is_gpu_available()
        else:
            return False
    
    def get_optimal_device(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        if self.should_use_gpu():
            return "cuda"
        else:
            return "cpu"
    
    def log_configuration(self) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self.logger.info("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:")
        self.logger.info(f"   –ú–æ–¥–µ–ª—å: {self.get_model_path()}")
        self.logger.info(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.get_optimal_device()}")
        self.logger.info(f"   CPU –ø–æ—Ç–æ–∫–æ–≤: {self.get_cpu_threads()}")
        self.logger.info(f"   –ú–∞–∫—Å. –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {self.get_max_generation_time()}—Å")
        self.logger.info(f"   –ú–∞–∫—Å. –≤–æ—Ä–∫–µ—Ä–æ–≤: {self.get_max_workers()}")
        self.logger.info(f"   GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {self.is_gpu_available()}") 