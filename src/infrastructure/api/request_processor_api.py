"""
Request Processor API - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""
import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional, List

import redis
import httpx
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

from src.domain.entities.request import Request
from src.infrastructure.persistence.in_memory_repositories import InMemoryRequestRepository as RequestRepository
from src.application.commands.request_commands import (
    ProcessRequestCommand,
    ProcessRequestCommandHandler,
    CommandBus
)
from src.shared.utils.logger import logger
from src.shared.config.config_manager import ConfigManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logger

app = FastAPI(title="RAG Request Processor API", version="2.0.0")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config_manager = ConfigManager()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(host='redis', port=6379, decode_responses=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
request_repository: Optional[RequestRepository] = None
command_bus: Optional[CommandBus] = None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SERVICES = {
    "ai-model": config_manager.get_service_url("ai_model"),
    "vectorstore": config_manager.get_service_url("vectorstore"),
    "scraper": config_manager.get_service_url("scraper"),
    "payment": config_manager.get_service_url("payment")
}


class ProcessRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    query: str
    user_id: Optional[str] = None
    session_id: Optional[str] = None
    services: List[str] = ["ai-model", "vectorstore"]  # –ö–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å


class ProcessResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    success: bool
    request_id: Optional[str] = None
    results: Dict[str, Any] = {}
    processing_time: float = 0.0
    timestamp: str
    error: Optional[str] = None


class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    status: str
    service: str
    timestamp: str
    dependencies: Dict[str, str]


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global request_repository, command_bus
    
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Request Processor API...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤
        request_repository = RequestRepository()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∏–Ω—É –∫–æ–º–∞–Ω–¥
        command_bus = CommandBus()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        command_bus.register_handler(
            ProcessRequestCommand,
            ProcessRequestCommandHandler(request_repository)
        )
        
        logger.info("‚úÖ Request Processor API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Request Processor API: {e}")
        raise


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        redis_healthy = "healthy"
        try:
            redis_client.ping()
        except:
            redis_healthy = "unhealthy"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        dependencies = {
            "redis": redis_healthy,
            "ai-model": "unknown",
            "vectorstore": "unknown",
            "scraper": "unknown",
            "payment": "unknown"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
        async with httpx.AsyncClient() as client:
            for service_name, service_url in SERVICES.items():
                try:
                    response = await client.get(f"{service_url}/health", timeout=5.0)
                    if response.status_code == 200:
                        dependencies[service_name] = "healthy"
                    else:
                        dependencies[service_name] = "unhealthy"
                except:
                    dependencies[service_name] = "unhealthy"
        
        overall_status = "healthy" if all(
            status == "healthy" for status in dependencies.values()
        ) else "unhealthy"
        
        return HealthResponse(
            status=overall_status,
            service="request-processor",
            timestamp=datetime.now().isoformat(),
            dependencies=dependencies
        )
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return HealthResponse(
            status="unhealthy",
            service="request-processor",
            timestamp=datetime.now().isoformat(),
            dependencies={},
            error=str(e)
        )


@app.post("/process", response_model=ProcessResponse)
async def process_request(request: ProcessRequest):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —à–∏–Ω—É –∫–æ–º–∞–Ω–¥"""
    start_time = time.time()
    
    try:
        if command_bus is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        command = ProcessRequestCommand(
            query=request.query,
            user_id=request.user_id,
            session_id=request.session_id,
            services=request.services
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        result = await command_bus.execute(command)
        
        duration = time.time() - start_time
        
        return ProcessResponse(
            success=True,
            request_id=result.get("request_id"),
            results=result.get("results", {}),
            processing_time=duration,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        duration = time.time() - start_time
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        return ProcessResponse(
            success=False,
            processing_time=duration,
            timestamp=datetime.now().isoformat(),
            error=str(e)
        )


class CheckTextRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—Å—Ç–∞"""
    query: str
    user_id: Optional[str] = None


@app.post("/check-text")
async def check_text(request: CheckTextRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º"""
    start_time = time.time()
    
    try:
        query = request.query.lower().strip()
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞: '{query}'")
        
        # 1. –ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
        results = {}
        selected_document = None
        
        try:
            async with httpx.AsyncClient() as client:
                vector_response = await client.post(
                    f"{SERVICES['vectorstore']}/search",
                    json={"query": query, "top_k": 5},
                    timeout=5.0
                )
                
                if vector_response.status_code == 200:
                    vector_data = vector_response.json()
                    results["vectorstore"] = vector_data
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                    vector_results = vector_data.get("results", [])
                    if vector_results:
                        selected_document = vector_results[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π)
                        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: relevance_score={selected_document.get('relevance_score')}, text={selected_document.get('text', '')[:100]}...")
                else:
                    results["vectorstore"] = {"error": "Vector store unavailable"}
                    
        except Exception as e:
            results["vectorstore"] = {"error": str(e)}
        
        # 2. –ê–Ω–∞–ª–∏–∑ AI –º–æ–¥–µ–ª—å—é
        if selected_document:
            try:
                context_text = selected_document.get("text", "")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
                ai_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –û–ø—Ä–µ–¥–µ–ª–∏ –°–ú–´–°–õ–û–í–£–Æ —Å–≤—è–∑—å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º.

–í–ê–ñ–ù–û: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å —Å–ª–æ–≤ –ù–ï –æ–∑–Ω–∞—á–∞–µ—Ç —Å–º—ã—Å–ª–æ–≤—É—é —Å–≤—è–∑—å!

–ó–∞–ø—Ä–æ—Å: "{query}"
–ú–∞—Ç–µ—Ä–∏–∞–ª: {context_text}

–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô:
1. –ò—â–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª/–∞–≤—Ç–æ—Ä–∞?
2. –ï—Å—Ç—å –ª–∏ –ø—Ä—è–º–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç–µ–º–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞?
3. –ò–ª–∏ —ç—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤?

–û–¢–í–ï–¢–¨: –î–∞/–ù–µ—Ç - [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]"""

                ai_response = await client.post(
                    f"{SERVICES['ai-model']}/generate",
                    json={
                        "query": ai_prompt,
                        "context": [],
                        "max_length": config_manager.get_max_new_tokens(),
                        "temperature": config_manager.get_generation_temperature()
                    },
                    timeout=config_manager.get_max_generation_time()
                )
                
                if ai_response.status_code == 200:
                    ai_data = ai_response.json()
                    results["ai-model"] = ai_data
                else:
                    results["ai-model"] = {"error": "AI model unavailable"}
                    
            except Exception as e:
                results["ai-model"] = {"error": str(e)}
        
        # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        final_result = {
            "query": query,
            "is_extremist": False,
            "confidence": 0.0,
            "reason": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å",
            "sources": []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ AI –∞–Ω–∞–ª–∏–∑–∞
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ vectorstore: {results.get('vectorstore', {})}")
        logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI: {results.get('ai-model', {})}")
        
        vector_results = results.get("vectorstore", {}).get("results", [])
        ai_result = results.get("ai-model", {})
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(vector_results)}")
        
        if vector_results and selected_document:
            best_match = selected_document
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: relevance_score={best_match.get('relevance_score')}, text={best_match.get('text', '')[:100]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–º—ã—Å–ª–æ–≤–æ–π —Å–≤—è–∑–∏
            if "result" in ai_result and ai_result.get("success", False):
                ai_response = ai_result["result"].lower()
                logger.info(f"ü§ñ AI –∞–Ω–∞–ª–∏–∑: {ai_response}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI –º–æ–¥–µ–ª–∏
                ai_response_lower = ai_response.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "–î–∞" –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞
                if ai_response_lower.startswith("–¥–∞"):
                    final_result["is_extremist"] = True
                    final_result["confidence"] = 0.9  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ AI
                    final_result["reason"] = f"AI –∞–Ω–∞–ª–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–≤—è–∑—å —Å —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º: {ai_response}"
                elif ai_response_lower.startswith("–Ω–µ—Ç"):
                    final_result["is_extremist"] = False
                    final_result["confidence"] = 0.8
                    final_result["reason"] = f"AI –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª —Å–≤—è–∑–∏ —Å —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏: {ai_response}"
                else:
                    # –ï—Å–ª–∏ AI –Ω–µ –¥–∞–ª —á–µ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
                    final_result["is_extremist"] = True
                    final_result["confidence"] = 1.0 - best_match["relevance_score"]
                    final_result["reason"] = f"–ù–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
            else:
                # –ï—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
                final_result["is_extremist"] = True
                final_result["confidence"] = 1.0 - best_match["relevance_score"]
                final_result["reason"] = f"–ù–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
            if "metadata" in best_match:
                metadata = best_match["metadata"]
                final_result["material_name"] = metadata.get("content", "")
                final_result["material_number"] = metadata.get("number", "")
                final_result["court_date"] = metadata.get("date", "")
            
            final_result["sources"] = [best_match]  # –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        
        processing_time = time.time() - start_time
        
        return {
            "success": True,
            "is_extremist": final_result["is_extremist"],
            "confidence": final_result["confidence"],
            "reason": final_result["reason"],
            "matches": final_result["sources"],
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat(),
            "services_used": list(results.keys()),
            "material_name": final_result.get("material_name", ""),
            "material_number": final_result.get("material_number", ""),
            "court_date": final_result.get("court_date", "")
        }
        
    except Exception as e:
        processing_time = time.time() - start_time
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        
        return {
            "success": False,
            "is_extremist": False,
            "confidence": 0.0,
            "reason": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }


@app.get("/requests/{request_id}")
async def get_request(request_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ"""
    try:
        if request_repository is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        request = request_repository.find_by_id(request_id)
        if not request:
            raise HTTPException(status_code=404, detail="Request not found")
        
        return {
            "request_id": request.id,
            "query": request.query,
            "status": request.status,
            "created_at": request.created_at.isoformat(),
            "processing_time": request.processing_time
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/requests/user/{user_id}")
async def get_user_requests(user_id: str, limit: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if request_repository is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        requests = request_repository.find_by_user_id(user_id, limit=limit)
        
        return {
            "user_id": user_id,
            "requests": [
                {
                    "request_id": req.id,
                    "query": req.query,
                    "status": req.status,
                    "created_at": req.created_at.isoformat()
                }
                for req in requests
            ],
            "total": len(requests)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/statistics")
async def get_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        if request_repository is None:
            raise HTTPException(status_code=503, detail="Service not initialized")
        
        all_requests = request_repository.find_all()
        
        return {
            "total_requests": len(all_requests),
            "successful_requests": len([r for r in all_requests if r.status == "completed"]),
            "failed_requests": len([r for r in all_requests if r.status == "failed"]),
            "average_processing_time": sum(r.processing_time for r in all_requests) / len(all_requests) if all_requests else 0
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/services/{service_name}/health")
async def check_service_health(service_name: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        if service_name not in SERVICES:
            raise HTTPException(status_code=404, detail="Service not found")
        
        service_url = SERVICES[service_name]
        
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{service_url}/health", timeout=5.0)
            
            return {
                "service": service_name,
                "url": service_url,
                "status": "healthy" if response.status_code == 200 else "unhealthy",
                "response_time": response.elapsed.total_seconds(),
                "status_code": response.status_code
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
        return {
            "service": service_name,
            "url": SERVICES.get(service_name, "unknown"),
            "status": "unhealthy",
            "error": str(e)
        } 